Producer Consumer Problem

The consumers are waiting in the blocked state for a producer to put item in the empty fifo_queue.
Producer will put item in the queue and then signals. Signal only puts a waiting thread in the running queue.
When producer signals, mutex is already unlocked. Therefore, other threads which may not be waiting in blocked state
could take the lock before the thread which was placed in the running queue tries to acquire lock.
Hence, other thread would process item before the signaled thread. Hence, when signaled thread will continue,
it will try to remove item from an empty queue. Thus, an exception will occur. However, if we use 'while' instead of 'if'
when checking for an empty queue the exception will not occur.

Solution:

Producer
while (true) {
       item = generate_item()
       mutex.lock()
       fifo_queue.push(item)
       mutex.unlock()
       condition.signal()
}

Consumers
while(true) {
       mutex.lock()
       while (fifo_queue.empty()) {  # 'while' statement instead of 'if' statement is the Fix
            condition.wait(mutex)
       }
       item = fifo_queue.remove()
       mutex.unlock()
       process_item(item)
}
